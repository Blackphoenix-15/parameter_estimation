import h5py
import numpy as np
from scipy.stats import norm, levy_stable
from tqdm import tqdm

# File to store dataset
dataset_filename = "genetic_switch_data.h5"

# Simulation parameters
T = 50
dt = 0.01
N = int(T / dt)
num_samples = 500  # We generate 500 samples

# Noise parameters
levy_alpha = 1.5
levy_beta = 0
noise_scale = 0.01
alpha = 0.7

# Genetic switch parameters
a_u, a_v = 1.0, 1.0
b_u, b_v = 1.0, 1.0
n = 2

# Create HDF5 file
with h5py.File(dataset_filename, "w") as f:
    dset_U = f.create_dataset("U_data", (num_samples, N), dtype="float32", compression="gzip")
    dset_V = f.create_dataset("V_data", (num_samples, N), dtype="float32", compression="gzip")

    print(f"ðŸš€ Generating dataset and saving to '{dataset_filename}'...")

    for i in tqdm(range(num_samples), desc="Generating Data", unit="sample"):
        U, V = np.zeros(N), np.zeros(N)
        U[0], V[0] = np.random.uniform(0.5, 1.5), np.random.uniform(0.5, 1.5)

        for t in range(1, N):
            dL_U = alpha * norm.rvs(scale=noise_scale) + (1 - alpha) * levy_stable.rvs(levy_alpha, levy_beta, scale=noise_scale)
            dL_V = alpha * norm.rvs(scale=noise_scale) + (1 - alpha) * levy_stable.rvs(levy_alpha, levy_beta, scale=noise_scale)

            dU = (a_u / (1 + V[t - 1] ** n) - b_u * U[t - 1]) * dt + dL_U
            dV = (a_v / (1 + U[t - 1] ** n) - b_v * V[t - 1]) * dt + dL_V

            U[t], V[t] = U[t - 1] + dU, V[t - 1] + dV

        dset_U[i] = U
        dset_V[i] = V

    print(f"âœ… Dataset saved in '{dataset_filename}'. Ready for download!")
