# ---------------------------- TRAINING LOOP ----------------------------

num_epochs = 20
loss_history = []

for epoch in range(num_epochs):
    model.train()
    total_loss = 0

    for batch_idx, (batch, targets) in enumerate(train_loader):
        batch = batch.to(device).float()
        targets = targets.to(device).float()

        optimizer.zero_grad()
        
        outputs = model(batch)  # Forward pass
        
        loss = criterion(outputs, targets)
        loss.backward()
        optimizer.step()
        
        total_loss += loss.item()

    avg_loss = total_loss / len(train_loader)
    loss_history.append(avg_loss)
    print(f"✅ Epoch {epoch+1}/{num_epochs} - Average Loss: {avg_loss:.6f}")

# ---------------------------- PLOT LOSS ----------------------------
plt.plot(range(1, num_epochs + 1), loss_history, marker="o", linestyle="-")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.title("Training Loss Over Epochs")
plt.grid()
plt.show()

# ---------------------------- SAVE MODEL ----------------------------
torch.save(model.state_dict(), "hybrid_model.pth")
print("✅ Model saved as 'hybrid_model.pth'!")
